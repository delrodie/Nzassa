<?php

namespace AppBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\NoResultException;

/**
 * BeneficiaireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BeneficiaireRepository extends \Doctrine\ORM\EntityRepository
{
    /**
    * Generation du code composant le matricule du Beneficiaire
    * Avec la methode mt_rand(10000000,99999999)
    *
    * Author: Delrodie AMOIKON
    * Since: v1.0 | 12/10/2016 18:25
    */
    public function generationCode()
    {

        // Affectation a code la valeur aleatoire generée
        $matricule = mt_rand(10000000, 99999999);

        return $matricule;
    }

    /**
    * Géneration d'une lettre aleatoire composant le matricule du beneficiaire
    *
    * Author: Delrodie AMOIKON
    * Since Version v1.0 | 12/10/2016 19:21
    */
    public function generationLettre()
    {
        // Liste des lettres de l'alphabet
        $alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        // Affectation d'une lettre aleatoire
        $lettre_aleatoire=$alphabet[rand(0,25)];

        return $lettre_aleatoire;
    }

    /**
    * Calcule du nombre d'occurence de beneficiaire
    *
    * Author: Delrodie AMOIKON
    * Since: version v1.0 | 13/10/2016 20:40
    */
    public function nombreBeneficiaires()
    {
        $qb = $this->createQueryBuilder('d')
            ->select('count(d.id)')
        ;

        $query = $qb->getQuery();

        $recup =  $query->getSingleScalarResult();

        // Si compteur est egal a 0 alors initialiser
        if ($recup < 10){
            $suffixe = $recup + 1;
            return $code = '00'.$suffixe;
        }
        elseif ($recup < 100) {
          $suffixe = $recup + 1;
          return $code = '0'.$suffixe;
        }
        else{
            return $code = $recup;
        }

    }
}
